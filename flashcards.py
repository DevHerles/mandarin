import streamlit as st
import sqlite3
import pandas as pd
import random
import time
import hashlib
import io
from typing import Dict, List, Optional, Tuple

# Configuraci√≥n de la p√°gina
st.set_page_config(
    page_title="Â≠¶‰π†‰∏≠Êñá - Flashcards",
    page_icon="üé¥",
    layout="wide",
    initial_sidebar_state="collapsed"
)

# C√≥digo de acceso (hash SHA-256 de ".Ad3l4nT3$$$$$")
ACCESS_CODE_HASH = "32b1514b28d7aa1aba3cdecbcfe3e370e3afcedd4b9fee1199f2801cc38cfe22"

class VocabularyDB:
    def __init__(self, db_path: str = "vocabulary.db"):
        self.db_path = db_path
        self.init_database()
    
    def init_database(self):
        """Inicializar base de datos con datos por defecto"""
        conn = sqlite3.connect(self.db_path)
        cursor = conn.cursor()
        
        # Crear tabla de vocabulario
        cursor.execute('''
            CREATE TABLE IF NOT EXISTS vocabulary (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                chinese TEXT NOT NULL,
                pinyin TEXT NOT NULL,
                spanish TEXT NOT NULL,
                category TEXT NOT NULL,
                created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
            )
        ''')
        
        # Crear tabla de configuraci√≥n
        cursor.execute('''
            CREATE TABLE IF NOT EXISTS config (
                key TEXT PRIMARY KEY,
                value TEXT NOT NULL
            )
        ''')
        
        # Verificar si ya hay datos
        cursor.execute("SELECT COUNT(*) FROM vocabulary")
        count = cursor.fetchone()[0]
        
        if count == 0:
            # Insertar datos por defecto
            default_data = [
                # Saludos y Cortes√≠a
                ('‰Ω†Â•Ω', 'n«ê h«éo', 'Hola', 'Saludos y Cortes√≠a'),
                ('ÂÜçËßÅ', 'z√†i ji√†n', 'Adi√≥s', 'Saludos y Cortes√≠a'),
                ('Ë∞¢Ë∞¢', 'xi√® xie', 'Gracias', 'Saludos y Cortes√≠a'),
                ('ËØ∑', 'q«êng', 'Por favor', 'Saludos y Cortes√≠a'),
                ('ÂØπ‰∏çËµ∑', 'du√¨ bu q«ê', 'Lo siento', 'Saludos y Cortes√≠a'),
                ('Ê≤°ÂÖ≥Á≥ª', 'm√©i guƒÅn xi', 'No importa', 'Saludos y Cortes√≠a'),
                ('Ê¨¢Ëøé', 'huƒÅn y√≠ng', 'Bienvenido', 'Saludos y Cortes√≠a'),
                
                # N√∫meros
                ('‰∏Ä', 'yƒ´', 'Uno', 'N√∫meros'),
                ('‰∫å', '√®r', 'Dos', 'N√∫meros'),
                ('‰∏â', 'sƒÅn', 'Tres', 'N√∫meros'),
                ('Âõõ', 's√¨', 'Cuatro', 'N√∫meros'),
                ('‰∫î', 'w«î', 'Cinco', 'N√∫meros'),
                ('ÂÖ≠', 'li√π', 'Seis', 'N√∫meros'),
                ('‰∏É', 'qƒ´', 'Siete', 'N√∫meros'),
                ('ÂÖ´', 'bƒÅ', 'Ocho', 'N√∫meros'),
                ('‰πù', 'ji«î', 'Nueve', 'N√∫meros'),
                ('ÂçÅ', 'sh√≠', 'Diez', 'N√∫meros'),
                
                # Familia
                ('Áà∏Áà∏', 'b√† ba', 'Pap√°', 'Familia'),
                ('Â¶àÂ¶à', 'mƒÅ ma', 'Mam√°', 'Familia'),
                ('ÂÑøÂ≠ê', '√©r zi', 'Hijo', 'Familia'),
                ('Â•≥ÂÑø', 'n«ö √©r', 'Hija', 'Familia'),
                ('Âì•Âì•', 'gƒì ge', 'Hermano mayor', 'Familia'),
                ('ÂßêÂßê', 'jiƒõ jie', 'Hermana mayor', 'Familia'),
                ('ÂºüÂºü', 'd√¨ di', 'Hermano menor', 'Familia'),
                ('Â¶πÂ¶π', 'm√®i mei', 'Hermana menor', 'Familia'),
                
                # Aula
                ('ËÄÅÂ∏à', 'l«éo shƒ´', 'Profesor/a', 'Aula'),
                ('Â≠¶Áîü', 'xu√© sheng', 'Estudiante', 'Aula'),
                ('ÈóÆÈ¢ò', 'w√®n t√≠', 'Pregunta', 'Aula'),
                ('Á≠îÊ°à', 'd√° √†n', 'Respuesta', 'Aula'),
                ('Ê±âËØ≠', 'h√†n y«î', 'Chino (idioma)', 'Aula'),
                ('ÊòéÁôΩ', 'm√≠ng bai', 'Entender', 'Aula'),
                ('ËØ¥', 'shu≈ç', 'Hablar/Decir', 'Aula'),
                ('Âê¨', 'tƒ´ng', 'Escuchar', 'Aula'),
                
                # Colores
                ('Á∫¢Ëâ≤', 'h√≥ng s√®', 'Rojo', 'Colores'),
                ('ËìùËâ≤', 'l√°n s√®', 'Azul', 'Colores'),
                ('ÁªøËâ≤', 'l«ú s√®', 'Verde', 'Colores'),
                ('ÈªÑËâ≤', 'hu√°ng s√®', 'Amarillo', 'Colores'),
                ('ÈªëËâ≤', 'hƒìi s√®', 'Negro', 'Colores'),
                ('ÁôΩËâ≤', 'b√°i s√®', 'Blanco', 'Colores'),
                ('Á¥´Ëâ≤', 'z«ê s√®', 'Morado', 'Colores'),
                
                # Tiempo
                ('‰ªäÂ§©', 'jƒ´n tiƒÅn', 'Hoy', 'Tiempo'),
                ('ÊòéÂ§©', 'm√≠ng tiƒÅn', 'Ma√±ana', 'Tiempo'),
                ('Êò®Â§©', 'zu√≥ tiƒÅn', 'Ayer', 'Tiempo'),
                ('Áé∞Âú®', 'xi√†n z√†i', 'Ahora', 'Tiempo'),
                ('Êó©‰∏ä', 'z«éo shang', 'Ma√±ana (AM)', 'Tiempo'),
                ('Êôö‰∏ä', 'w«én shang', 'Noche', 'Tiempo'),
                ('Âπ¥', 'ni√°n', 'A√±o', 'Tiempo'),
                ('Êúà', 'yu√®', 'Mes', 'Tiempo'),
                ('Â§©', 'tiƒÅn', 'D√≠a', 'Tiempo'),
            ]
            
            cursor.executemany('''
                INSERT INTO vocabulary (chinese, pinyin, spanish, category)
                VALUES (?, ?, ?, ?)
            ''', default_data)
        
        conn.commit()
        conn.close()
    
    def get_categories(self) -> List[str]:
        """Obtener todas las categor√≠as disponibles"""
        conn = sqlite3.connect(self.db_path)
        cursor = conn.cursor()
        cursor.execute("SELECT DISTINCT category FROM vocabulary ORDER BY category")
        categories = [row[0] for row in cursor.fetchall()]
        conn.close()
        return categories
    
    def get_words_by_category(self, category: str) -> List[Dict]:
        """Obtener palabras por categor√≠a"""
        conn = sqlite3.connect(self.db_path)
        cursor = conn.cursor()
        
        if category == "Todas las categor√≠as":
            cursor.execute("SELECT chinese, pinyin, spanish, category FROM vocabulary")
        else:
            cursor.execute("SELECT chinese, pinyin, spanish, category FROM vocabulary WHERE category = ?", (category,))
        
        words = []
        for row in cursor.fetchall():
            words.append({
                'chinese': row[0],
                'pinyin': row[1],
                'spanish': row[2],
                'category': row[3]
            })
        
        conn.close()
        return words
    
    def get_random_word(self, category: str) -> Optional[Dict]:
        """Obtener una palabra aleatoria de la categor√≠a"""
        words = self.get_words_by_category(category)
        if words:
            return random.choice(words)
        return None
    
    def add_word(self, chinese: str, pinyin: str, spanish: str, category: str) -> bool:
        """Agregar nueva palabra"""
        try:
            conn = sqlite3.connect(self.db_path)
            cursor = conn.cursor()
            cursor.execute('''
                INSERT INTO vocabulary (chinese, pinyin, spanish, category)
                VALUES (?, ?, ?, ?)
            ''', (chinese, pinyin, spanish, category))
            conn.commit()
            conn.close()
            return True
        except Exception as e:
            st.error(f"Error al agregar palabra: {e}")
            return False
    
    def update_word(self, word_id: int, chinese: str, pinyin: str, spanish: str, category: str) -> bool:
        """Actualizar palabra existente"""
        try:
            conn = sqlite3.connect(self.db_path)
            cursor = conn.cursor()
            cursor.execute('''
                UPDATE vocabulary 
                SET chinese = ?, pinyin = ?, spanish = ?, category = ?
                WHERE id = ?
            ''', (chinese, pinyin, spanish, category, word_id))
            conn.commit()
            conn.close()
            return True
        except Exception as e:
            st.error(f"Error al actualizar palabra: {e}")
            return False
    
    def delete_word(self, word_id: int) -> bool:
        """Eliminar palabra"""
        try:
            conn = sqlite3.connect(self.db_path)
            cursor = conn.cursor()
            cursor.execute("DELETE FROM vocabulary WHERE id = ?", (word_id,))
            conn.commit()
            conn.close()
            return True
        except Exception as e:
            st.error(f"Error al eliminar palabra: {e}")
            return False
    
    def get_all_words(self) -> pd.DataFrame:
        """Obtener todas las palabras como DataFrame"""
        conn = sqlite3.connect(self.db_path)
        df = pd.read_sql_query("SELECT * FROM vocabulary ORDER BY category, chinese", conn)
        conn.close()
        return df
    
    def import_from_csv(self, csv_data: str) -> Tuple[int, int]:
        """Importar palabras desde CSV"""
        try:
            df = pd.read_csv(io.StringIO(csv_data))
            
            # Verificar columnas requeridas
            required_columns = ['chinese', 'pinyin', 'spanish', 'category']
            if not all(col in df.columns for col in required_columns):
                st.error(f"El CSV debe contener las columnas: {', '.join(required_columns)}")
                return 0, 0
            
            conn = sqlite3.connect(self.db_path)
            cursor = conn.cursor()
            
            added = 0
            errors = 0
            
            for _, row in df.iterrows():
                try:
                    cursor.execute('''
                        INSERT INTO vocabulary (chinese, pinyin, spanish, category)
                        VALUES (?, ?, ?, ?)
                    ''', (row['chinese'], row['pinyin'], row['spanish'], row['category']))
                    added += 1
                except:
                    errors += 1
            
            conn.commit()
            conn.close()
            return added, errors
        except Exception as e:
            st.error(f"Error al importar CSV: {e}")
            return 0, 0
    
    def set_config(self, key: str, value: str):
        """Guardar configuraci√≥n"""
        conn = sqlite3.connect(self.db_path)
        cursor = conn.cursor()
        cursor.execute('''
            INSERT OR REPLACE INTO config (key, value)
            VALUES (?, ?)
        ''', (key, value))
        conn.commit()
        conn.close()
    
    def get_config(self, key: str, default: str = None) -> str:
        """Obtener configuraci√≥n"""
        conn = sqlite3.connect(self.db_path)
        cursor = conn.cursor()
        cursor.execute("SELECT value FROM config WHERE key = ?", (key,))
        result = cursor.fetchone()
        conn.close()
        return result[0] if result else default

def hash_password(password: str) -> str:
    """Generar hash SHA-256 de la contrase√±a"""
    return hashlib.sha256(password.encode()).hexdigest()

def check_access():
    """Verificar acceso con c√≥digo"""
    if 'authenticated' not in st.session_state:
        st.session_state.authenticated = False
    
    if not st.session_state.authenticated:
        st.markdown("""
        <div style="text-align: center; padding: 50px;">
            <h2>üîê Acceso Restringido</h2>
            <p>Por favor, ingresa el c√≥digo de acceso para continuar</p>
        </div>
        """, unsafe_allow_html=True)
        
        col1, col2, col3 = st.columns([1, 2, 1])
        with col2:
            access_code = st.text_input("C√≥digo de acceso:", type="password", key="access_input")
            
            if st.button("üö™ Ingresar", use_container_width=True):
                if hash_password(access_code) == ACCESS_CODE_HASH:
                    st.session_state.authenticated = True
                    st.success("‚úÖ Acceso autorizado")
                    st.rerun()
                else:
                    st.error("‚ùå C√≥digo incorrecto")
        
        st.stop()

def create_audio_component(text: str, auto_play: bool = False):
    """Crear componente de audio que funciona autom√°ticamente"""
    auto_play_script = """
    setTimeout(() => {
        playAudio();
    }, 500);
    """ if auto_play else ""
    
    return f"""
    <div style="text-align: center; margin: 20px 0;">
        <button onclick="playAudio()" 
                style="background: #e74c3c; color: white; border: none; padding: 15px 30px; 
                       border-radius: 25px; font-size: 1.2em; cursor: pointer; 
                       box-shadow: 0 4px 15px rgba(0,0,0,0.2); transition: all 0.3s;">
            üîä Reproducir Audio
        </button>
    </div>
    <script>
        function playAudio() {{
            if (window.speechSynthesis) {{
                window.speechSynthesis.cancel();
                const utterance = new SpeechSynthesisUtterance('{text}');
                utterance.lang = 'zh-CN';
                utterance.rate = 0.7;
                utterance.pitch = 1.0;
                utterance.volume = 1.0;
                window.speechSynthesis.speak(utterance);
            }}
        }}
        {auto_play_script}
    </script>
    """

def admin_panel(db: VocabularyDB):
    """Panel de administraci√≥n de vocabulario"""
    st.markdown("## üõ†Ô∏è Panel de Administraci√≥n")
    
    # Pesta√±as para diferentes funciones
    tab1, tab2, tab3, tab4 = st.tabs(["üìù Agregar Palabra", "üìä Ver/Editar", "üì§ Importar CSV", "üìã Exportar"])
    
    with tab1:
        st.markdown("### Agregar Nueva Palabra")
        
        col1, col2 = st.columns(2)
        
        with col1:
            chinese = st.text_input("Palabra en Chino:", key="add_chinese")
            pinyin = st.text_input("Pinyin:", key="add_pinyin")
        
        with col2:
            spanish = st.text_input("Traducci√≥n al Espa√±ol:", key="add_spanish")
            
            # Obtener categor√≠as existentes
            categories = db.get_categories()
            category_options = categories + ["‚ûï Nueva categor√≠a"]
            
            category_choice = st.selectbox("Categor√≠a:", category_options, key="add_category_choice")
            
            if category_choice == "‚ûï Nueva categor√≠a":
                category = st.text_input("Nueva categor√≠a:", key="add_new_category")
            else:
                category = category_choice
        
        if st.button("‚úÖ Agregar Palabra", key="add_word_btn"):
            if chinese and pinyin and spanish and category:
                if db.add_word(chinese, pinyin, spanish, category):
                    st.success("‚úÖ Palabra agregada exitosamente")
                    st.rerun()
            else:
                st.error("‚ùå Por favor completa todos los campos")
    
    with tab2:
        st.markdown("### Ver y Editar Vocabulario")
        
        # Filtro por categor√≠a
        categories = ["Todas"] + db.get_categories()
        filter_category = st.selectbox("Filtrar por categor√≠a:", categories, key="filter_category")
        
        # Obtener datos
        df = db.get_all_words()
        
        if filter_category != "Todas":
            df = df[df['category'] == filter_category]
        
        # Mostrar tabla editable
        if not df.empty:
            st.dataframe(df, use_container_width=True)
            
            # Seleccionar palabra para editar
            word_ids = df['id'].tolist()
            selected_id = st.selectbox("Seleccionar palabra para editar:", 
                                     [f"{row['chinese']} - {row['spanish']}" for _, row in df.iterrows()],
                                     key="edit_select")
            
            if selected_id:
                selected_row = df.iloc[df.index[df.apply(lambda x: f"{x['chinese']} - {x['spanish']}" == selected_id, axis=1)].tolist()[0]]
                
                col1, col2 = st.columns(2)
                
                with col1:
                    edit_chinese = st.text_input("Chino:", value=selected_row['chinese'], key="edit_chinese")
                    edit_pinyin = st.text_input("Pinyin:", value=selected_row['pinyin'], key="edit_pinyin")
                
                with col2:
                    edit_spanish = st.text_input("Espa√±ol:", value=selected_row['spanish'], key="edit_spanish")
                    edit_category = st.text_input("Categor√≠a:", value=selected_row['category'], key="edit_category")
                
                col1, col2 = st.columns(2)
                
                with col1:
                    if st.button("üíæ Actualizar", key="update_btn"):
                        if db.update_word(selected_row['id'], edit_chinese, edit_pinyin, edit_spanish, edit_category):
                            st.success("‚úÖ Palabra actualizada")
                            st.rerun()
                
                with col2:
                    if st.button("üóëÔ∏è Eliminar", key="delete_btn"):
                        if db.delete_word(selected_row['id']):
                            st.success("‚úÖ Palabra eliminada")
                            st.rerun()
    
    with tab3:
        st.markdown("### Importar desde CSV")
        
        st.info("El CSV debe contener las columnas: chinese, pinyin, spanish, category")
        
        # Ejemplo de formato
        st.markdown("**Ejemplo de formato CSV:**")
        example_csv = """chinese,pinyin,spanish,category
‰Ω†Â•Ω,n«ê h«éo,Hola,Saludos
ÂÜçËßÅ,z√†i ji√†n,Adi√≥s,Saludos"""
        st.code(example_csv)
        
        uploaded_file = st.file_uploader("Cargar archivo CSV", type=['csv'])
        
        if uploaded_file is not None:
            # Mostrar preview
            csv_data = uploaded_file.getvalue().decode('utf-8')
            st.markdown("**Vista previa:**")
            preview_df = pd.read_csv(io.StringIO(csv_data))
            st.dataframe(preview_df.head())
            
            if st.button("üì• Importar Datos"):
                added, errors = db.import_from_csv(csv_data)
                if added > 0:
                    st.success(f"‚úÖ {added} palabras importadas exitosamente")
                if errors > 0:
                    st.warning(f"‚ö†Ô∏è {errors} errores durante la importaci√≥n")
                if added > 0:
                    st.rerun()
    
    with tab4:
        st.markdown("### Exportar Vocabulario")
        
        # Obtener datos
        df = db.get_all_words()
        
        # Opci√≥n de filtrar por categor√≠a
        categories = ["Todas"] + db.get_categories()
        export_category = st.selectbox("Exportar categor√≠a:", categories, key="export_category")
        
        if export_category != "Todas":
            df = df[df['category'] == export_category]
        
        # Mostrar estad√≠sticas
        st.metric("Total de palabras a exportar", len(df))
        
        # Preparar CSV
        csv = df.to_csv(index=False)
        
        st.download_button(
            label="üì• Descargar CSV",
            data=csv,
            file_name=f"vocabulario_{export_category.lower().replace(' ', '_')}.csv",
            mime="text/csv"
        )

def main():
    # Verificar acceso
    check_access()
    
    # Inicializar base de datos
    db = VocabularyDB()
    
    # CSS personalizado
    st.markdown("""
    <link href="https://fonts.googleapis.com/css2?family=Noto+Serif+SC&display=swap" rel="stylesheet">
    <style>
        .main-title {
            font-family: 'Noto Serif SC', KaiTi, STKaiti, "KaiTi SC", "KaiTi TC", serif;
            font-size: 3em;
            text-align: center;
            color: #c0392b;
            margin-bottom: 30px;
        }
        .chinese-word {
            font-family: 'Noto Serif SC', KaiTi, STKaiti, "KaiTi SC", "KaiTi TC", serif;
            font-size: 10em;
            text-align: center;
            color: #2c3e50;
            background: linear-gradient(135deg, #f5f7fa 0%, #c3cfe2 100%);
            padding: 50px;
            border-radius: 20px;
            margin: 30px 0;
            border: 4px solid #3498db;
            box-shadow: 0 10px 30px rgba(0,0,0,0.1);
        }
        .pinyin-translation {
            font-size: 2em;
            text-align: center;
            color: #8e44ad;
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            color: white;
            padding: 30px;
            border-radius: 15px;
            margin: 20px 0;
            font-weight: bold;
        }
        .phase-indicator {
            font-size: 1.0em;
            text-align: center;
            padding: 15px;
            border-radius: 10px;
            margin: 20px 0;
            font-weight: bold;
        }
        .phase-1 { background: #e8f5e8; color: #27ae60; }
        .phase-2 { background: #fff3cd; color: #f39c12; }
        .phase-3 { background: #f8d7da; color: #c0392b; }
        .countdown-timer {
            text-align: center;
            margin: 20px 0;
            padding: 15px;
            background: #f39c12;
            color: white;
            border-radius: 10px;
            font-size: 1.2em;
            font-weight: bold;
        }
        .audio-playing {
            text-align: center;
            margin: 20px 0;
            padding: 20px;
            background: #2ecc71;
            color: white;
            border-radius: 10px;
            font-size: 1.3em;
            animation: pulse 2s infinite;
        }
        @keyframes pulse {
            0% { opacity: 1; }
            50% { opacity: 0.7; }
            100% { opacity: 1; }
        }
        @media (max-width: 768px) {
            .chinese-word {
                font-size: 6em;
                padding: 30px;
            }
            .pinyin-translation {
                font-size: 1.0em;
                padding: 20px;
            }
        }
    </style>
    """, unsafe_allow_html=True)
    
    # Sidebar para navegaci√≥n
    with st.sidebar:
        st.markdown("### üéØ Navegaci√≥n")
        
        # Modo de aplicaci√≥n
        app_mode = st.selectbox(
            "Seleccionar modo:",
            ["üé¥ Flashcards", "üõ†Ô∏è Administraci√≥n"],
            key="app_mode"
        )
        
        if app_mode == "üõ†Ô∏è Administraci√≥n":
            admin_panel(db)
            return
        
        st.markdown("---")
        st.markdown("### ‚öôÔ∏è Configuraciones")
        
        # Selecci√≥n de categor√≠a con persistencia
        categories = ["Todas las categor√≠as"] + db.get_categories()
        saved_category = db.get_config('selected_category', 'Todas las categor√≠as')
        
        try:
            default_index = categories.index(saved_category)
        except ValueError:
            default_index = 0
        
        selected_category = st.selectbox(
            "üìö Categor√≠a:",
            categories,
            index=default_index,
            key="category_select"
        )
        
        # Guardar categor√≠a seleccionada
        if selected_category != saved_category:
            db.set_config('selected_category', selected_category)
        
        # Configuraci√≥n de tiempo
        wait_time = st.slider("‚è±Ô∏è Tiempo de espera (segundos)", 1, 10, 3)
        
        # Avance autom√°tico
        auto_advance = st.checkbox("üîÑ Avance autom√°tico", True)
        
        # Estad√≠sticas
        st.markdown("---")
        st.markdown("### üìä Estad√≠sticas")
        st.metric("Palabras estudiadas", st.session_state.get('words_studied', 0))
        st.metric("Categor√≠a actual", selected_category)
        st.metric("Tiempo por fase", f"{wait_time}s")
        
        # Bot√≥n de cerrar sesi√≥n
        st.markdown("---")
        if st.button("üö™ Cerrar Sesi√≥n"):
            st.session_state.authenticated = False
            st.rerun()
    
    # Inicializar estado de sesi√≥n
    if 'current_word' not in st.session_state:
        st.session_state.current_word = None
    if 'current_data' not in st.session_state:
        st.session_state.current_data = None
    if 'phase' not in st.session_state:
        st.session_state.phase = 0
    if 'is_playing' not in st.session_state:
        st.session_state.is_playing = False
    if 'phase_start_time' not in st.session_state:
        st.session_state.phase_start_time = None
    if 'words_studied' not in st.session_state:
        st.session_state.words_studied = 0
    if 'current_category' not in st.session_state:
        st.session_state.current_category = selected_category
    if 'last_update' not in st.session_state:
        st.session_state.last_update = time.time()
    
    # Actualizar configuraciones
    st.session_state.wait_time = wait_time
    st.session_state.auto_advance = auto_advance
    
    # Cambio de categor√≠a
    if selected_category != st.session_state.current_category:
        st.session_state.current_category = selected_category
        st.session_state.current_word = None
        st.session_state.phase = 0
        st.session_state.is_playing = False
        st.session_state.phase_start_time = None
    
    # T√≠tulo principal
    st.markdown('<h1 class="main-title">Â≠¶‰π†‰∏≠Êñá üé¥</h1>', unsafe_allow_html=True)
    st.markdown('<p style="text-align: center; font-size: 1.2em; color: #7f8c8d;">Flashcards para aprender vocabulario chino</p>', unsafe_allow_html=True)
    
    # Controles principales
    col1, col2, col3, col4 = st.columns(4)
    
    with col1:
        if st.button("üéØ Nueva Palabra", key="new_word", use_container_width=True):
            word_data = db.get_random_word(st.session_state.current_category)
            if word_data:
                st.session_state.current_word = word_data['chinese']
                st.session_state.current_data = word_data
                st.session_state.phase = 1
                st.session_state.phase_start_time = time.time()
                st.session_state.is_playing = True
                st.rerun()
    
    with col2:
        play_text = "‚è∏Ô∏è Pausar" if st.session_state.is_playing else "‚ñ∂Ô∏è Iniciar"
        if st.button(play_text, key="play_pause", use_container_width=True):
            if st.session_state.current_word:
                st.session_state.is_playing = not st.session_state.is_playing
                if st.session_state.is_playing:
                    st.session_state.phase_start_time = time.time()
                st.rerun()
    
    with col3:
        if st.button("‚è≠Ô∏è Siguiente", key="next_phase", use_container_width=True):
            if st.session_state.current_word:
                if st.session_state.phase < 3:
                    st.session_state.phase += 1
                    st.session_state.phase_start_time = time.time()
                else:
                    # Nueva palabra
                    st.session_state.words_studied += 1
                    word_data = db.get_random_word(st.session_state.current_category)
                    if word_data:
                        st.session_state.current_word = word_data['chinese']
                        st.session_state.current_data = word_data
                        st.session_state.phase = 1
                        st.session_state.phase_start_time = time.time()
                st.rerun()
    
    with col4:
        if st.button("üîÑ Reiniciar", key="reset", use_container_width=True):
            st.session_state.phase = 0
            st.session_state.is_playing = False
            st.session_state.current_word = None
            st.session_state.phase_start_time = None
            st.session_state.words_studied = 0
            st.rerun()
    
    # √Årea principal de flashcard
    if st.session_state.current_word is None:
        st.markdown("""
        <div style="text-align: center; padding: 50px; background: #000000; border-radius: 10px; margin: 20px 0;">
            <h2>üëã ¬°Bienvenido!</h2>
            <p>Presiona <strong>"üéØ Nueva Palabra"</strong> para comenzar tu sesi√≥n de estudio</p>
        </div>
        """, unsafe_allow_html=True)
    else:
        # Mostrar indicador de fase
        phase_info = {
            1: {"text": "üéØ Fase 1: Identifica la palabra", "class": "phase-1"},
            2: {"text": "üìù Fase 2: Pinyin y traducci√≥n", "class": "phase-2"},
            3: {"text": "üîä Fase 3: Escucha la pronunciaci√≥n", "class": "phase-3"}
        }
        
        if st.session_state.phase > 0:
            current_phase = phase_info[st.session_state.phase]
            st.markdown(f"""
            <div class="phase-indicator {current_phase['class']}">
                {current_phase['text']}
            </div>
            """, unsafe_allow_html=True)
        
        # Mostrar contenido seg√∫n la fase
        if st.session_state.phase >= 1:
            # Fase 1: Mostrar palabra china
            st.markdown(f"""
            <div class="chinese-word">
                {st.session_state.current_word}
            </div>
            """, unsafe_allow_html=True)
        
        if st.session_state.phase >= 2:
            # Fase 2: Mostrar pinyin y traducci√≥n
            st.markdown(f"""
            <div class="pinyin-translation">
                <div style="font-size: 1.2em; margin-bottom: 10px;">
                    üìù {st.session_state.current_data['pinyin']}
                </div>
                <div style="font-size: 1em;">
                    üá™üá∏ {st.session_state.current_data['spanish']}
                </div>
                <div style="font-size: 0.8em; margin-top: 10px; opacity: 0.8;">
                    üìÇ {st.session_state.current_data['category']}
                </div>
            </div>
            """, unsafe_allow_html=True)
        
        if st.session_state.phase >= 3:
            # Fase 3: Mostrar audio autom√°tico
            st.markdown(f"""
            <div class="audio-playing">
                üîä ¬°Escucha la pronunciaci√≥n!
            </div>
            """, unsafe_allow_html=True)
            
            # Reproducir audio autom√°ticamente
            audio_html = create_audio_component(st.session_state.current_word, auto_play=True)
            st.components.v1.html(audio_html, height=100)
        
        # Bot√≥n de audio manual disponible desde la fase 2
        if st.session_state.phase >= 2 and st.session_state.phase < 3:
            audio_html = create_audio_component(st.session_state.current_word, auto_play=False)
            st.components.v1.html(audio_html, height=100)
        
        # L√≥gica de avance autom√°tico mejorada
        if (st.session_state.is_playing and 
            st.session_state.auto_advance and 
            st.session_state.phase_start_time is not None):
            
            current_time = time.time()
            elapsed_time = current_time - st.session_state.phase_start_time
            remaining_time = st.session_state.wait_time - elapsed_time
            
            if remaining_time > 0:
                # Mostrar countdown
                st.markdown(f"""
                <div class="countdown-timer">
                    ‚è≥ {'Siguiente fase' if st.session_state.phase < 3 else 'Nueva palabra'} en: {remaining_time:.1f}s
                </div>
                """, unsafe_allow_html=True)
                
                # Refresh cada 0.1 segundos
                if current_time - st.session_state.last_update >= 0.1:
                    st.session_state.last_update = current_time
                    time.sleep(0.1)
                    st.rerun()
                    
            else:
                # Tiempo terminado - avanzar
                if st.session_state.phase < 3:
                    st.session_state.phase += 1
                    st.session_state.phase_start_time = time.time()
                else:
                    # Completar palabra y pasar a la siguiente
                    st.session_state.words_studied += 1
                    word_data = db.get_random_word(st.session_state.current_category)
                    if word_data:
                        st.session_state.current_word = word_data['chinese']
                        st.session_state.current_data = word_data
                        st.session_state.phase = 1
                        st.session_state.phase_start_time = time.time()
                
                st.rerun()

if __name__ == "__main__":
    main()